x = c(3,3,4,3,6,8,8,9)
y = c(22,25,18,20,16,9,12,5)
Nex_x = 5
Train = data.frame(x = x,y = y)
Nex_x = data.frame(x = 5)
Train = data.frame(x = x,y = y)
lmTrain = lm(formula = y~x,data = Train)
predicted = predict(lmTrain,newdata = Nex_x)
plot(y~x,main = "依藥劑量預測痊癒天數",xlab = "藥劑量",ylab = "感冒痊癒天數",family = "STHeiti")
points(x = Nex_x,y = predicted,col = "green",cex = 2,pch = 16)
abline(reg = lmTrain$coefficients,col = "red",lwd = 1)
?points
plot(y~x,main = "依藥劑量預測痊癒天數",xlab = "藥劑量",ylab = "感冒痊癒天數",family = "STHeiti")
points(x = Nex_x,y = predicted,col = "green",cex = 5,pch = 16)
abline(reg = lmTrain$coefficients,col = "red",lwd = 1)
?lm
?predict
install.packages("RJDBC")
library(RJDBC)
drv = JDBC("com.mysql.jdbc.Driver","C:\\mysql-connector-java-5.1.42-bin.jar")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53.3306/iii","iii","iii@WSX1qaz")
dbListTables(conn)
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53:3306/iii","iii","iii@WSX1qaz")
dbListTables(conn)
dbReadTable(conn,"airquality")
a = dbGetQuery(conn,"select * from airquality")
class(a)
sensor = dbGetQuery(conn,"sensor")
drv = JDBC("com.mysql.jdbc.Driver","C:\\mysql-connector-java-5.1.42-bin.jar")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53.3306/iii","iii","iii@WSX1qaz")
library(RJDBC)
drv = JDBC("com.mysql.jdbc.Driver","C:\\mysql-connector-java-5.1.42-bin.jar")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53.3306/iii","iii","iii@WSX1qaz")
dbListTables(conn)
sensor = dbGetQuery(conn,"sensor")
sensor = dbReadTable(conn,"sensor")
?airquality
library(RJDBC)
drv = JDBC("com.mysql.jdbc.Driver","C:\\mysql-connector-java-5.1.42-bin.jar")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53.3306/iii","iii","iii@WSX1qaz")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53:3306/iii","iii","iii@WSX1qaz")
sensor = dbReadTable(conn,"sensor")
sensor = dbGetQuery(conn,"sensor")
sensor = dbGetQuery(conn,"select * from sensor")
airquality = dbGetQuery(conn,"select * from airquality")
install.packages("sqldf")
library(sqldf)
,cast(substr(trim(dt),9,2) as int) day
having cast(substr(trim(dt),7,1) as int) <>0")
df_sensor <-sqldf(SELECT cast(substr(trim(dt),7,1) as int) month,
cast(substr(trim(dt),9,2) as int) day,
avg(humidity) avg_humidity
FROM sensor
group by  cast(substr(trim(dt),7,1) as int),cast(substr(trim(dt),9,2) as int)
having cast(substr(trim(dt),7,1) as int) <>0)
df_sensor <-sqldf("SELECT cast(substr(trim(dt),7,1) as int) month,
cast(substr(trim(dt),9,2) as int) day,
avg(humidity) avg_humidity
FROM sensor
group by  cast(substr(trim(dt),7,1) as int),cast(substr(trim(dt),9,2) as int)
having cast(substr(trim(dt),7,1) as int) <>0")
df_sensor = sqldf("select cast(substr(trim(dt),7,1) as int) month,
cast(substr(trim(dt),9,2) as int) day,
avg(temperature) avg_temperature,
avg(humidity) avg_humidity
from sensor group by
cast(substr(trim(dt),7,1) as int),
cast(substr(trim(dt),9,2) as int)
having cast(substr(trim(dt),7,1) as int) <> 0
")
df_allitems = sqldf("select a.*, b.avg_temperature, b.avg_humidity
from airquality a
left join df_sensor b
on a.Month = b.month and a.Day = b.day")
lmTrain = lm(formula = Ozone~Solar_R + Wind + avg_temperature + avg_humidity,
data = subset(df_allitems, complete.cases(df_allitems)))
summary(lmTrain)
New_data = data.frame(Solar_R = 200,Wind = 12,avg_temperature = 32.1,avg_humidity = 62.7)
predicted = predict(lmTrain,newdata = New_data)
predicted/1000
dbDisconnect(conn)
model = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,data=iris)
summary(model)
model = lm(formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,data=iris)
summary(model)
model = lm(formula = Sepal.Length ~ Sepal.Width,data=iris)
summary(model)
setwd("E:/R_practice")
head(iris)
data = iris[ ,-5]
head(iris)
head(data)
e.distange = dist(data, method = 'euclidean')
e.distange
m.distange = dist(data, method = 'manhattan')  #使用曼哈頓距離來建立資料之間的「距離矩陣」
m.distange
head(iris)
e.cluster <- hclust(e.distange)  #以hclust()函式(給定資料之間的距離矩陣)做分群
plot(e.cluster, xlab="歐式距離")
e.cluster <- hclust(e.distange, method="single")     # 最近法
plot(e.cluster, xlab="歐式距離")
e.cluster <- hclust(e.distange, method="complete")  # 最遠法
plot(e.cluster, xlab="歐式距離")
e.cluster <- hclust(e.distange, method="average")   # 平均法
plot(e.cluster, xlab="歐式距離")
e.cluster <- hclust(e.distange, method="centroid")  # 中心法
plot(e.cluster, xlab="歐式距離")
e.cluster <- hclust(e.distange, method="ward.D2")   # 華德法
plot(e.cluster, xlab="歐式距離")
abline(h=9, col="red")
cut.cluster = cutree(e.cluster, k=3)
cut.cluster
table(cut.cluster, iris$Species)
require(ggplot2)
ggplot(data = iris) + geom_point(aes(x=Species, color=Species))
ggplot(data = iris) + geom_point(aes(x=Petal.Length,y=Petal.Width,color=Species))
data = iris[ ,-5]
kmean = kmeans(data, center = 3)    #kmeans須先決定要分幾組
table(kmeans.cluster$cluster, iris$Species)
table(kmeans$cluster, iris$Species)
table(kmean$cluster, iris$Species)
require(factoextra)
install.packages('factoextra')
install.packages("factoextra")
fviz_cluster(kmean,                    #分群結果
data = data,              #資料
geom = c("point","text"), #點和標籤(point & label)
frame.type = "norm")
table(kmean$cluster, iris$Species)
