x = c(3,3,4,3,6,8,8,9)
y = c(22,25,18,20,16,9,12,5)
Nex_x = 5
Train = data.frame(x = x,y = y)
Nex_x = data.frame(x = 5)
Train = data.frame(x = x,y = y)
lmTrain = lm(formula = y~x,data = Train)
predicted = predict(lmTrain,newdata = Nex_x)
plot(y~x,main = "依藥劑量預測痊癒天數",xlab = "藥劑量",ylab = "感冒痊癒天數",family = "STHeiti")
points(x = Nex_x,y = predicted,col = "green",cex = 2,pch = 16)
abline(reg = lmTrain$coefficients,col = "red",lwd = 1)
?points
plot(y~x,main = "依藥劑量預測痊癒天數",xlab = "藥劑量",ylab = "感冒痊癒天數",family = "STHeiti")
points(x = Nex_x,y = predicted,col = "green",cex = 5,pch = 16)
abline(reg = lmTrain$coefficients,col = "red",lwd = 1)
?lm
?predict
install.packages("RJDBC")
library(RJDBC)
drv = JDBC("com.mysql.jdbc.Driver","C:\\mysql-connector-java-5.1.42-bin.jar")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53.3306/iii","iii","iii@WSX1qaz")
dbListTables(conn)
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53:3306/iii","iii","iii@WSX1qaz")
dbListTables(conn)
dbReadTable(conn,"airquality")
a = dbGetQuery(conn,"select * from airquality")
class(a)
sensor = dbGetQuery(conn,"sensor")
drv = JDBC("com.mysql.jdbc.Driver","C:\\mysql-connector-java-5.1.42-bin.jar")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53.3306/iii","iii","iii@WSX1qaz")
library(RJDBC)
drv = JDBC("com.mysql.jdbc.Driver","C:\\mysql-connector-java-5.1.42-bin.jar")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53.3306/iii","iii","iii@WSX1qaz")
dbListTables(conn)
sensor = dbGetQuery(conn,"sensor")
sensor = dbReadTable(conn,"sensor")
?airquality
library(RJDBC)
drv = JDBC("com.mysql.jdbc.Driver","C:\\mysql-connector-java-5.1.42-bin.jar")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53.3306/iii","iii","iii@WSX1qaz")
conn = dbConnect(drv,"jdbc:mysql://172.104.90.53:3306/iii","iii","iii@WSX1qaz")
sensor = dbReadTable(conn,"sensor")
sensor = dbGetQuery(conn,"sensor")
sensor = dbGetQuery(conn,"select * from sensor")
airquality = dbGetQuery(conn,"select * from airquality")
install.packages("sqldf")
library(sqldf)
,cast(substr(trim(dt),9,2) as int) day
having cast(substr(trim(dt),7,1) as int) <>0")
df_sensor <-sqldf(SELECT cast(substr(trim(dt),7,1) as int) month,
cast(substr(trim(dt),9,2) as int) day,
avg(humidity) avg_humidity
FROM sensor
group by  cast(substr(trim(dt),7,1) as int),cast(substr(trim(dt),9,2) as int)
having cast(substr(trim(dt),7,1) as int) <>0)
df_sensor <-sqldf("SELECT cast(substr(trim(dt),7,1) as int) month,
cast(substr(trim(dt),9,2) as int) day,
avg(humidity) avg_humidity
FROM sensor
group by  cast(substr(trim(dt),7,1) as int),cast(substr(trim(dt),9,2) as int)
having cast(substr(trim(dt),7,1) as int) <>0")
df_sensor = sqldf("select cast(substr(trim(dt),7,1) as int) month,
cast(substr(trim(dt),9,2) as int) day,
avg(temperature) avg_temperature,
avg(humidity) avg_humidity
from sensor group by
cast(substr(trim(dt),7,1) as int),
cast(substr(trim(dt),9,2) as int)
having cast(substr(trim(dt),7,1) as int) <> 0
")
df_allitems = sqldf("select a.*, b.avg_temperature, b.avg_humidity
from airquality a
left join df_sensor b
on a.Month = b.month and a.Day = b.day")
lmTrain = lm(formula = Ozone~Solar_R + Wind + avg_temperature + avg_humidity,
data = subset(df_allitems, complete.cases(df_allitems)))
summary(lmTrain)
New_data = data.frame(Solar_R = 200,Wind = 12,avg_temperature = 32.1,avg_humidity = 62.7)
predicted = predict(lmTrain,newdata = New_data)
predicted/1000
dbDisconnect(conn)
a <- read.csv('暖暖包.csv', header=F)   #讀取csv
setwd("E:/firstcode/team_code/Regression")
rowdata <- read.csv('暖暖包.csv', header=F)   #讀取csv
?omit
?lm
a <- na.omit(a)#若資料中有null值用0取代
rowdata
a <- na.omit(rowdata)#若資料中有null值用0取代
a
attach(a)#將資料建成表
lm1
lm1 <- lm(V3~V4)#跑複迴歸
lm1
if(is.na(summary(lm1)$r.squared) == FALSE){
if(summary(lm1)$r.squared > 0){
if (summary(lm1)$r.squared > 0.2){
print(summary(lm1))
k = append(k , d)
k = append(k , 'V4')
}
}
}
if(summary(lm1)$r.squared > 0){
if (summary(lm1)$r.squared > 0.2){
print(summary(lm1))
k = append(k , d)
k = append(k , 'V4')
}
}
if(is.na(summary(lm1)$r.squared) == FALSE){
if(summary(lm1)$r.squared > 0){
if (summary(lm1)$r.squared > 0.2){
print(summary(lm1))
k = append(k , d)
k = append(k , 'V4')
}
}
}
lm1
summary(lm1)
attach(a)#將資料建成表
a <- na.omit(rowdata)#若資料中有null值用0取代
a
tcome <- lm(V3~V4)  #跑迴歸 lm(y值~x值)
summa
outcome <- lm(V3~V4)  #跑迴歸 lm(y值~x值)
summary(outcome)
outcome <- lm(V4~V3)  #跑迴歸 lm(y值(column name)~x值(column name))
summary(outcome)
a = summary(outcome)
if(is.na(summary(lm1)$r.squared) == FALSE){    #summary(lm1)內r.squared即是r-square值
#if(summary(lm1)$r.squared > 0){
if (summary(lm1)$r.squared > 0.2){
print(summary(lm1))
#
}
}
if(is.na(summary(lm1)$r.squared) == FALSE){    #summary(lm1)內r.squared即是r-square值
#if(summary(lm1)$r.squared > 0){
if (summary(lm1)$r.squared > 0.2){
print(V3,summary(lm1)$r.squared)
#
}
}
print(V3)
print(summary(lm1)$r.squared)
print("與氣壓做迴歸"+summary(lm1)$r.squared)
outcome <- lm(V3~V5)  #跑迴歸，輸入要跑迴歸的兩兩參數
summary(outcome)   #看迴歸結果，p-value < 0.05為一顆星，R-squared > 0.75才有顯著性
if(is.na(summary(lm1)$r.squared) == FALSE){    #summary(lm1)內r.squared即是r-square值
if (summary(lm1)$r.squared > 0.2){    #顯示r-square > 0.2的值
print(summary(lm1)$r.squared)
}
}
print("與氣壓做迴歸"+summary(lm1)$r.squared)
print(summary(lm1)$r.squared)
print("與氣壓做迴歸")
print("與氣壓做迴歸"+str(summary(lm1)$r.squared))
print(summary(lm1)$r.squared)
print('hi ' + str(summary(lm1)$r.squared))
print(summary(lm1)$r.squared)
bb = summary(lm1)$r.squared
bb
print("與氣壓做迴歸"+toString(summary(lm1)$r.squared))
paste('與氣壓做迴歸', '123')
paste('與氣壓做迴歸', '123', sep= ="")
paste('與氣壓做迴歸', '123', sep= =" ")
paste('與氣壓做迴歸', '123', sep=" ")
paste('與氣壓做迴歸', '123', sep="")
print(paste("與氣壓做迴歸:" , summary(lm1)$r.squared) sep=""))
print(paste("與氣壓做迴歸:" , summary(lm1)$r.squared) , sep=""))
)
if (summary(lm1)$r.squared > 0.2){    #顯示r-square > 0.2的值
print("與氣壓做迴歸:")
print(summary(lm1)$r.squared)
print("=========================================")
}
